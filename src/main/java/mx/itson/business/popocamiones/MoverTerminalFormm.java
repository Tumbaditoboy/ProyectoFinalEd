/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mx.itson.business.popocamiones;

import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.SwingConstants;
import mx.itson.entidades.popocamiones.Autobus;


/**
 *
 * @author dzlan
 */
public class MoverTerminalFormm extends javax.swing.JFrame {

    /**
     * Creates new form MoverTerminalFormm
     */
    public MoverTerminalFormm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MoverTerminalFormm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MoverTerminalFormm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MoverTerminalFormm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MoverTerminalFormm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MoverTerminalFormm().setVisible(true);
            }
        });
    }
    
   
    private JLabel lblTerminalActual;
    private JTextArea txtReporte;
    private JButton btnSiguienteTerminal;
    private int terminalIndex = 0; // Índice de la terminal actual
    private Autobus autobus;
    private EstadosAsientosFormm ventanaAsientos; // Ventana gráfica de asientos 

    public MoverTerminalFormm(Autobus autobus) {
        super("Mover Terminal");
        this.autobus = autobus;
        setSize(500, 400);
        setLocation(200, 100); // Ubicación relativa para evitar superposición
        setLayout(new BorderLayout());
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Crear y mostrar la ventana gráfica de los asientos
        ventanaAsientos = new EstadosAsientosFormm(null, autobus); 
        ventanaAsientos.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        ventanaAsientos.setVisible(true);

        // Etiqueta para la terminal actual
        lblTerminalActual = new JLabel("Terminal Actual: " + autobus.getTerminales().get(terminalIndex));
        lblTerminalActual.setFont(new Font("Arial", Font.BOLD, 16));
        lblTerminalActual.setHorizontalAlignment(SwingConstants.CENTER);

        // Área de texto para mostrar el reporte de pasajeros
        txtReporte = new JTextArea();
        txtReporte.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(txtReporte);

        // Botón para avanzar a la siguiente terminal
        btnSiguienteTerminal = new JButton("Siguiente Terminal");
        btnSiguienteTerminal.addActionListener((ActionEvent e) -> moverASiguienteTerminal());

        // Botón para cerrar
        JButton btnCerrar = new JButton("Cerrar");
        btnCerrar.addActionListener((ActionEvent e) -> {
            ventanaAsientos.dispose(); // Cerrar también la ventana de asientos
            dispose();
        });

        // Panel de botones
        JPanel panelBotones = new JPanel();
        panelBotones.setLayout(new GridLayout(1, 2, 10, 10));
        panelBotones.add(btnSiguienteTerminal);
        panelBotones.add(btnCerrar);

        // Agregar componentes al formulario
        add(lblTerminalActual, BorderLayout.NORTH);
        add(scrollPane, BorderLayout.CENTER);
        add(panelBotones, BorderLayout.SOUTH);

        // Mostrar los pasajeros iniciales
        actualizarReporte();
    }

    private void moverASiguienteTerminal() {
        // Obtener la terminal actual
        String terminalActual = autobus.getTerminales().get(terminalIndex);

        // Contar cuántos pasajeros se bajan en la terminal actual
        long pasajerosBajados = autobus.getPasajeros().stream()
                .filter(p -> p.getDestino().equalsIgnoreCase(terminalActual))
                .count();

        // Liberar asientos y eliminar pasajeros que se bajan
        autobus.bajarPasajerosEnTerminal(terminalActual);

        // Mostrar información en el área de texto
        txtReporte.append("Terminal: " + terminalActual + "\n");
        txtReporte.append("Se bajaron " + pasajerosBajados + " pasajeros.\n");

        // Actualizar reporte y ventana gráfica de asientos
        actualizarReporte();
        ventanaAsientos.actualizarAsientos(autobus);

        // Avanzar al siguiente índice de la terminal
        terminalIndex++;
        if (terminalIndex < autobus.getTerminales().size()) {
            lblTerminalActual.setText("Terminal Actual: " + autobus.getTerminales().get(terminalIndex));
        } else {
            lblTerminalActual.setText("Terminal Finalizada: " + terminalActual);
            btnSiguienteTerminal.setEnabled(false); // Deshabilitar el botón
        }
    }

    private void actualizarReporte() {
        // Mostrar el estado de los asientos y pasajeros
        txtReporte.append("--- Estado Actual ---\n");
        txtReporte.append("Pasajeros actuales: " + autobus.getPasajeros().size() + "\n");
        txtReporte.append("Asientos disponibles:\n");

        for (int i = 0; i < autobus.getAsientos().length; i++) {
            txtReporte.append("Asiento " + (i + 1) + ": ");
            txtReporte.append(autobus.getAsientos()[i] ? "Ocupado\n" : "Disponible\n");
        }
        txtReporte.append("\n");
    }


    
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
